// Mocks generated by Mockito 5.1.0 from annotations
// in todos/test/mocks.dart.
// Do not manually edit this file.

import 'dart:async' as _i5;

import 'package:dartz/dartz.dart' as _i2;
import 'package:mockito/mockito.dart' as _i1;
import 'package:todos/core/errors/failure.dart' as _i6;
import 'package:todos/src/data/datasources/local/todo_local_source.dart'
    as _i15;
import 'package:todos/src/data/datasources/local/user_local_source.dart'
    as _i14;
import 'package:todos/src/data/datasources/remote/todo_remote_source.dart'
    as _i16;
import 'package:todos/src/data/models/todo_model.dart' as _i17;
import 'package:todos/src/data/models/user_model.dart' as _i3;
import 'package:todos/src/domain/entities/todo.dart' as _i10;
import 'package:todos/src/domain/entities/user.dart' as _i7;
import 'package:todos/src/domain/repositories/auth_repository.dart' as _i11;
import 'package:todos/src/domain/repositories/todo_repository.dart' as _i13;
import 'package:todos/src/domain/repositories/user_repository.dart' as _i12;
import 'package:todos/src/domain/usecases/auth_usecases.dart' as _i4;
import 'package:todos/src/domain/usecases/todo_usecases.dart' as _i9;
import 'package:todos/src/domain/usecases/user_usecases.dart' as _i8;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types

class _FakeEither_0<L, R> extends _i1.Fake implements _i2.Either<L, R> {}

class _FakeUserSignupModel_1 extends _i1.Fake implements _i3.UserSignupModel {}

/// A class which mocks [AuthUsecases].
///
/// See the documentation for Mockito's code generation for more information.
class MockAuthUsecases extends _i1.Mock implements _i4.AuthUsecases {
  MockAuthUsecases() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i5.Future<_i2.Either<_i6.Failure, _i7.User>> signup(
          String? username, String? password) =>
      (super.noSuchMethod(Invocation.method(#signup, [username, password]),
              returnValue: Future<_i2.Either<_i6.Failure, _i7.User>>.value(
                  _FakeEither_0<_i6.Failure, _i7.User>()))
          as _i5.Future<_i2.Either<_i6.Failure, _i7.User>>);
  @override
  _i5.Future<_i2.Either<_i6.Failure, _i7.User>> login(
          String? username, String? password) =>
      (super.noSuchMethod(Invocation.method(#login, [username, password]),
              returnValue: Future<_i2.Either<_i6.Failure, _i7.User>>.value(
                  _FakeEither_0<_i6.Failure, _i7.User>()))
          as _i5.Future<_i2.Either<_i6.Failure, _i7.User>>);
}

/// A class which mocks [UserUsecases].
///
/// See the documentation for Mockito's code generation for more information.
class MockUserUsecases extends _i1.Mock implements _i8.UserUsecases {
  MockUserUsecases() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i5.Future<_i2.Either<_i6.Failure, _i7.User?>> getLoggedInUser() =>
      (super.noSuchMethod(Invocation.method(#getLoggedInUser, []),
              returnValue: Future<_i2.Either<_i6.Failure, _i7.User?>>.value(
                  _FakeEither_0<_i6.Failure, _i7.User?>()))
          as _i5.Future<_i2.Either<_i6.Failure, _i7.User?>>);
  @override
  _i5.Future<_i2.Either<_i6.Failure, bool>> logout() =>
      (super.noSuchMethod(Invocation.method(#logout, []),
              returnValue: Future<_i2.Either<_i6.Failure, bool>>.value(
                  _FakeEither_0<_i6.Failure, bool>()))
          as _i5.Future<_i2.Either<_i6.Failure, bool>>);
}

/// A class which mocks [TodoUsecases].
///
/// See the documentation for Mockito's code generation for more information.
class MockTodoUsecases extends _i1.Mock implements _i9.TodoUsecases {
  MockTodoUsecases() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i5.Future<_i2.Either<_i6.Failure, List<_i10.Todo>>> getTodos(int? userId) =>
      (super.noSuchMethod(Invocation.method(#getTodos, [userId]),
          returnValue: Future<_i2.Either<_i6.Failure, List<_i10.Todo>>>.value(
              _FakeEither_0<_i6.Failure, List<_i10.Todo>>())) as _i5
          .Future<_i2.Either<_i6.Failure, List<_i10.Todo>>>);
  @override
  _i5.Future<_i2.Either<_i6.Failure, _i5.Stream<List<_i10.Todo>>>>
      listenToChanges(int? userId) => (super.noSuchMethod(
          Invocation.method(#listenToChanges, [userId]),
          returnValue: Future<
                  _i2.Either<_i6.Failure, _i5.Stream<List<_i10.Todo>>>>.value(
              _FakeEither_0<_i6.Failure, _i5.Stream<List<_i10.Todo>>>())) as _i5
          .Future<_i2.Either<_i6.Failure, _i5.Stream<List<_i10.Todo>>>>);
  @override
  _i5.Future<_i2.Either<_i6.Failure, _i10.Todo>> toggleTodoComplete(
          _i10.Todo? todo) =>
      (super.noSuchMethod(Invocation.method(#toggleTodoComplete, [todo]),
              returnValue: Future<_i2.Either<_i6.Failure, _i10.Todo>>.value(
                  _FakeEither_0<_i6.Failure, _i10.Todo>()))
          as _i5.Future<_i2.Either<_i6.Failure, _i10.Todo>>);
}

/// A class which mocks [AuthRepository].
///
/// See the documentation for Mockito's code generation for more information.
class MockAuthRepository extends _i1.Mock implements _i11.AuthRepository {
  MockAuthRepository() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i5.Future<_i2.Either<_i6.Failure, _i7.User>> signup(
          String? username, String? password) =>
      (super.noSuchMethod(Invocation.method(#signup, [username, password]),
              returnValue: Future<_i2.Either<_i6.Failure, _i7.User>>.value(
                  _FakeEither_0<_i6.Failure, _i7.User>()))
          as _i5.Future<_i2.Either<_i6.Failure, _i7.User>>);
  @override
  _i5.Future<_i2.Either<_i6.Failure, _i7.User>> login(
          String? username, String? password) =>
      (super.noSuchMethod(Invocation.method(#login, [username, password]),
              returnValue: Future<_i2.Either<_i6.Failure, _i7.User>>.value(
                  _FakeEither_0<_i6.Failure, _i7.User>()))
          as _i5.Future<_i2.Either<_i6.Failure, _i7.User>>);
}

/// A class which mocks [UserRepository].
///
/// See the documentation for Mockito's code generation for more information.
class MockUserRepository extends _i1.Mock implements _i12.UserRepository {
  MockUserRepository() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i5.Future<_i2.Either<_i6.Failure, _i7.User?>> getLoggedInUser() =>
      (super.noSuchMethod(Invocation.method(#getLoggedInUser, []),
              returnValue: Future<_i2.Either<_i6.Failure, _i7.User?>>.value(
                  _FakeEither_0<_i6.Failure, _i7.User?>()))
          as _i5.Future<_i2.Either<_i6.Failure, _i7.User?>>);
  @override
  _i5.Future<_i2.Either<_i6.Failure, bool>> logout() =>
      (super.noSuchMethod(Invocation.method(#logout, []),
              returnValue: Future<_i2.Either<_i6.Failure, bool>>.value(
                  _FakeEither_0<_i6.Failure, bool>()))
          as _i5.Future<_i2.Either<_i6.Failure, bool>>);
}

/// A class which mocks [TodoRepository].
///
/// See the documentation for Mockito's code generation for more information.
class MockTodoRepository extends _i1.Mock implements _i13.TodoRepository {
  MockTodoRepository() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i5.Future<_i2.Either<_i6.Failure, List<_i10.Todo>>> getTodos(int? userId) =>
      (super.noSuchMethod(Invocation.method(#getTodos, [userId]),
          returnValue: Future<_i2.Either<_i6.Failure, List<_i10.Todo>>>.value(
              _FakeEither_0<_i6.Failure, List<_i10.Todo>>())) as _i5
          .Future<_i2.Either<_i6.Failure, List<_i10.Todo>>>);
  @override
  _i5.Future<_i2.Either<_i6.Failure, _i5.Stream<List<_i10.Todo>>>>
      listenToChanges(int? userId) => (super.noSuchMethod(
          Invocation.method(#listenToChanges, [userId]),
          returnValue: Future<
                  _i2.Either<_i6.Failure, _i5.Stream<List<_i10.Todo>>>>.value(
              _FakeEither_0<_i6.Failure, _i5.Stream<List<_i10.Todo>>>())) as _i5
          .Future<_i2.Either<_i6.Failure, _i5.Stream<List<_i10.Todo>>>>);
  @override
  _i5.Future<_i2.Either<_i6.Failure, _i10.Todo>> toggleTodoComplete(
          _i10.Todo? todo) =>
      (super.noSuchMethod(Invocation.method(#toggleTodoComplete, [todo]),
              returnValue: Future<_i2.Either<_i6.Failure, _i10.Todo>>.value(
                  _FakeEither_0<_i6.Failure, _i10.Todo>()))
          as _i5.Future<_i2.Either<_i6.Failure, _i10.Todo>>);
}

/// A class which mocks [UserLocalSource].
///
/// See the documentation for Mockito's code generation for more information.
class MockUserLocalSource extends _i1.Mock implements _i14.UserLocalSource {
  MockUserLocalSource() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i5.Future<bool> get areBoxesOpen =>
      (super.noSuchMethod(Invocation.getter(#areBoxesOpen),
          returnValue: Future<bool>.value(false)) as _i5.Future<bool>);
  @override
  void registerAdapters() =>
      super.noSuchMethod(Invocation.method(#registerAdapters, []),
          returnValueForMissingStub: null);
  @override
  _i5.Future<void> openBoxes() =>
      (super.noSuchMethod(Invocation.method(#openBoxes, []),
          returnValue: Future<void>.value(),
          returnValueForMissingStub: Future<void>.value()) as _i5.Future<void>);
  @override
  _i5.Future<int> userCount() =>
      (super.noSuchMethod(Invocation.method(#userCount, []),
          returnValue: Future<int>.value(0)) as _i5.Future<int>);
  @override
  _i5.Future<bool> hasUser(String? username) =>
      (super.noSuchMethod(Invocation.method(#hasUser, [username]),
          returnValue: Future<bool>.value(false)) as _i5.Future<bool>);
  @override
  _i5.Future<_i3.UserSignupModel?> getUser(
          String? username, String? password) =>
      (super.noSuchMethod(Invocation.method(#getUser, [username, password]),
              returnValue: Future<_i3.UserSignupModel?>.value())
          as _i5.Future<_i3.UserSignupModel?>);
  @override
  _i5.Future<_i3.UserSignupModel> addUser(String? username, String? password) =>
      (super.noSuchMethod(Invocation.method(#addUser, [username, password]),
              returnValue:
                  Future<_i3.UserSignupModel>.value(_FakeUserSignupModel_1()))
          as _i5.Future<_i3.UserSignupModel>);
  @override
  _i5.Future<Map<String, _i3.UserSignupModel>?> getLoggedInUser() =>
      (super.noSuchMethod(Invocation.method(#getLoggedInUser, []),
              returnValue: Future<Map<String, _i3.UserSignupModel>?>.value())
          as _i5.Future<Map<String, _i3.UserSignupModel>?>);
  @override
  _i5.Future<void> loginUser(String? username) =>
      (super.noSuchMethod(Invocation.method(#loginUser, [username]),
          returnValue: Future<void>.value(),
          returnValueForMissingStub: Future<void>.value()) as _i5.Future<void>);
  @override
  _i5.Future<bool> logoutUser() =>
      (super.noSuchMethod(Invocation.method(#logoutUser, []),
          returnValue: Future<bool>.value(false)) as _i5.Future<bool>);
}

/// A class which mocks [TodoLocalSource].
///
/// See the documentation for Mockito's code generation for more information.
class MockTodoLocalSource extends _i1.Mock implements _i15.TodoLocalSource {
  MockTodoLocalSource() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i5.Future<bool> get areBoxesOpen =>
      (super.noSuchMethod(Invocation.getter(#areBoxesOpen),
          returnValue: Future<bool>.value(false)) as _i5.Future<bool>);
  @override
  void registerAdapters() =>
      super.noSuchMethod(Invocation.method(#registerAdapters, []),
          returnValueForMissingStub: null);
  @override
  _i5.Future<void> openBoxes() =>
      (super.noSuchMethod(Invocation.method(#openBoxes, []),
          returnValue: Future<void>.value(),
          returnValueForMissingStub: Future<void>.value()) as _i5.Future<void>);
  @override
  _i5.Future<bool> hasTodos(int? userId) =>
      (super.noSuchMethod(Invocation.method(#hasTodos, [userId]),
          returnValue: Future<bool>.value(false)) as _i5.Future<bool>);
  @override
  _i5.Future<List<_i10.Todo>?> getTodos(int? userId) =>
      (super.noSuchMethod(Invocation.method(#getTodos, [userId]),
              returnValue: Future<List<_i10.Todo>?>.value())
          as _i5.Future<List<_i10.Todo>?>);
  @override
  _i5.Future<_i5.Stream<List<_i10.Todo>>?> listenToChanges(int? userId) =>
      (super.noSuchMethod(Invocation.method(#listenToChanges, [userId]),
              returnValue: Future<_i5.Stream<List<_i10.Todo>>?>.value())
          as _i5.Future<_i5.Stream<List<_i10.Todo>>?>);
  @override
  _i5.Future<void> addTodos(List<_i10.Todo>? todos) =>
      (super.noSuchMethod(Invocation.method(#addTodos, [todos]),
          returnValue: Future<void>.value(),
          returnValueForMissingStub: Future<void>.value()) as _i5.Future<void>);
  @override
  _i5.Future<_i10.Todo?> toggleTodoComplete(_i10.Todo? todo) =>
      (super.noSuchMethod(Invocation.method(#toggleTodoComplete, [todo]),
          returnValue: Future<_i10.Todo?>.value()) as _i5.Future<_i10.Todo?>);
}

/// A class which mocks [TodoRemoteSource].
///
/// See the documentation for Mockito's code generation for more information.
class MockTodoRemoteSource extends _i1.Mock implements _i16.TodoRemoteSource {
  MockTodoRemoteSource() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i5.Future<List<_i17.TodoModel>> getTodos() => (super.noSuchMethod(
          Invocation.method(#getTodos, []),
          returnValue: Future<List<_i17.TodoModel>>.value(<_i17.TodoModel>[]))
      as _i5.Future<List<_i17.TodoModel>>);
}
